Class SQLRefiner:

    Function main_refiner(sql_query: str, value_mappings: List[Dict], llm_model = "mistral:instruct") -> Dict:
        /*
        Refine SQL query with provided value mappings
        
        Args:
            sql_query: SQL query to refine
            value_mappings: List of dictionaries containing original and matched values
            llm_model: The LLM model to use for refinement (default: "mistral:instruct")
            
        Returns:
            Dictionary containing:
                - original_sql: Input SQL query
                - value_mappings: List of matched values with scores
                - refined_sql: Refined or original SQL query
        */
        
        1. If no value mappings provided:
           Return {
               "original_sql": sql_query,
               "value_mappings": [],
               "refined_sql": sql_query
           }
        
        2. Filter out mappings with score 100:
           filtered_mappings = [mapping for mapping in value_mappings if mapping.get("score", 0) != 100]
           
        3. If no mappings remain after filtering:
           Return {
               "original_sql": sql_query,
               "value_mappings": value_mappings,
               "refined_sql": sql_query
           }
        
        4. Create refinement prompt:
           prompt = f"""Return ONLY the modified SQL query with these replacements:
           {Join each mapping in filtered_mappings as: original_value -> matched_value}
           Query: {sql_query}"""
        
        5. Get refined SQL from LLM:
           refined_sql = generate_text(prompt, model=llm_model)
        
        6. Return results:
           Return {
               "original_sql": sql_query,
               "value_mappings": value_mappings,
               "refined_sql": refined_sql
           } 