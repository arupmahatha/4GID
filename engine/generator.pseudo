Class SQLGenerator:

    Function __init__():
        /*
        Purpose: Initialize the generator with schema embedder
        */
        1. Create new SchemaEmbedder instance

    Function main_generator(user_query, llm_model = "mistral:instruct"):
        /*
        Purpose: Generate a single SQL query using LLM based on user query and schema.
                The query can be simple or complex depending on the user's needs.
        Parameters:
            - user_query: Natural language query from user
            - llm_model: The LLM model to use for generation (default: "mistral:instruct")
        Returns: Dictionary containing metadata and the generated SQL query
        */
        1. Get relevant schema information:
           formatted_metadata = schema_embedder.get_formatted_schema(user_query)

        2. Create initial prompt:
           "Given these tables and columns:
            {formatted_metadata}
            
            Generate a single SQL query for this request:
            {user_query}
            
            Requirements:
            - Return ONLY the raw SQL query text, no markdown formatting
            - Do not include ```sql or ``` markers
            - No explanations or additional text
            - The query can be simple or complex depending on what's needed
            - Use appropriate JOINs, subqueries, or aggregations if required
            - Ensure the query is complete and executable
            - When filtering on columns with choices, use the exact choice values provided in the metadata"

        3. Get SQL from LLM using llm_call.generate_text() with model parameter

        4. Return:
            {
                "user_query": original user query,
                "formatted_metadata": formatted schema information,
                "generated_sql": SQL generated in step 3
            }