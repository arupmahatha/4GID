Class SQLGenerator:
    Constructor:
        Initialize schema_embedder with SchemaEmbedder()
        Set db_schema_path to utils/db_schema.pkl

    Function main_generator(user_query, llm_model = "mistral:instruct"):
        /*
        Purpose: Generate a single SQL query using LLM based on user query and schema.
                The query can be simple or complex depending on the user's needs.
        Parameters:
            - user_query: Natural language query from user
            - llm_model: The LLM model to use for generation (default: "mistral:instruct")
        Returns: Dictionary containing metadata and the generated SQL query (no additional text/explanations)
        */
        1. Get relevant tables and columns:
            - Use schema_embedder.query_tables() to get relevant tables and columns for the query
            - This returns list of (table_name, columns) tuples

        2. Format table and column information:
            - Create empty result list
            - For each (table_name, columns) from step 1:
                Format as: "table_name (column1, column2, ...)"
                Add blank line for readability
            - Join all with newlines to create formatted_metadata

        3. Create initial prompt:
            "Given these tables and columns:
             {formatted_metadata}
             
             Generate a single SQL query for this request:
             {user_query}
             
             Requirements:
             - Return ONLY the raw SQL query text, no markdown formatting
             - Do not include ```sql or ``` markers
             - No explanations or additional text
             - The query can be simple or complex depending on what's needed
             - Use appropriate JOINs, subqueries, or aggregations if required
             - Ensure the query is complete and executable
             - When filtering on columns with choices, use the exact choice values provided in the metadata"

        4. Get SQL from LLM using llm_call.generate_text() with model parameter

        5. Return dictionary containing:
            {
                "user_query": original user query,
                "formatted_metadata": formatted table and column information,
                "generated_sql": SQL generated in step 4 (single query only)
            }