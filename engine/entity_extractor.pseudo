Class EntityExtractor:

    Function main_entity_extractor(sql_query: str, llm_model = "mistral:instruct") -> List[Dict]:
        /*
        Extract entities from SQL query
        Parameters:
            - sql_query: SQL query to analyze
            - llm_model: The LLM model to use for extraction (default: "mistral:instruct")
        Returns list of table, column, value mappings
        */
        
        1. Define extraction prompt with detailed instructions:
           extraction_prompt = """
           You are an SQL entity extractor. Your ONLY task is to extract real-world entities.
           
           Format: table_name|column_name|comparison_value
           
           Step 1 - SQL Structure Analysis:
           1. First identify actual database tables (not views/CTEs):
              - CTEs (WITH clause) are temporary views, NEVER use them as table names
              - Subqueries are temporary views, NEVER use them as table names
              - Table aliases (e.g., 'p', 't1') are shortcuts, NEVER use them as table names
           
           2. For each column, trace its true origin:
              - Follow the JOIN chain to find the source table
              - Resolve aliases to full table names (e.g., 'p.name' comes from 'Program.name')
              - Identify computed columns (they are not real data)
           
           Step 2 - Entity Identification:
           ONLY extract entities that meet ALL these criteria:
           1. Table name must be:
              - An actual database table (not a CTE, view, or alias)
              - The original source table (not an intermediate join)
           
           2. Column must be:
              - A real data column (not computed/derived)
              - From the source table (not aggregated or transformed)
              - Storing actual entity data (names, descriptions, IDs, etc.)
           
           3. Comparison value must be:
              - An actual specific value being compared
              - Not NULL
              - Not a mathematical comparison (>, <, >=, <=)
              - Not a logical condition (AND, OR, NOT)
              - Not a pattern match (LIKE, IN)
              - Not a number or boolean
           
           NEVER output any of these:
           - NULL values in any field
           - CTE names as table names (e.g., 'ProgramMetrics')
           - Table aliases as table names (e.g., 'p' instead of 'Program')
           - Computed/derived columns
           - Aggregated fields (COUNT, SUM, AVG, etc.)
           - Mathematical comparisons
           - Columns without specific value comparisons
           
           Example Valid Extractions:
           Program|name|John Smith              # Real table, real column, specific value
           Student|email|alice@example.com      # Real table, real column, specific value
           
           Example Invalid Extractions (NEVER output these):
           ProgramMetrics|count|5               # Uses CTE as table
           p|name|NULL                          # Uses alias and NULL
           Program|enrolled_learners|>0         # Mathematical comparison
           Program|avg_completion_time|3.5      # Computed column
           
           CRITICAL INSTRUCTIONS:
           - If no valid entities are found, return ABSOLUTELY NOTHING. Not even empty lines or explanations.
           - ONLY output the exact table_name|column_name|comparison_value format for valid entities.
           - ANY other output format is considered an error.
           """
        
        2. Get entity mapping from LLM:
           entity_text = generate_text(extraction_prompt + "\n\nQuery: " + sql_query, model=llm_model)
        
        3. Initialize empty list for extracted entities:
           extracted_entities = []
        
        4. For each line in entity_text:
           a. Skip if line doesn't contain '|'
           b. Split line into table, column, value
           c. Strip whitespace from each component
           
           d. Skip invalid entries if:
              - value is 'NULL'
              - table starts with alias (e.g., 'p.')
              - value contains comparisons ('>', '<', '=', 'NULL')
              - value is a number (after removing decimal points)
           
           e. If valid, add to extracted_entities:
              {
                  "table": table,
                  "column": column,
                  "value": value
              }
        
        5. Return extracted_entities 